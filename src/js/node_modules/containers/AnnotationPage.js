import React, { PropTypes } from 'react';
import Relay from 'react-relay';

import { capitalize } from 'utils/string';
import EntityPageVerticalTable from 'components/EntityPageVerticalTable';
import theme from 'theme';

const ICON_SIZE = 30;
const FOOTER_HEIGHT = 112;

const styles = {
  container: {
    maxWidth: '1170px',
    width: '80%',
    marginLeft: 'auto',
    marginRight: 'auto',
    marginBottom: FOOTER_HEIGHT + 15,
  },
  icon: {
    width: ICON_SIZE,
    height: ICON_SIZE,
    flex: 'none',
    marginRight: 10,
    background: 'url(/images/icon-annotations-large.png) no-repeat',
  },
  header: {
    display: 'flex',
    alignItems: 'center',
  },
  notes: {
    marginTop: 20,
    backgroundColor: '#fff',
    border: `1px solid ${theme.greyScale4}`,
  },
  notesHeader: {
    color: theme.greyScale7,
    width: '100%',
    fontSize: '24px',
    lineHeight: '1.4em',
    fontWeight: 'normal',
    marginTop: 0,
    marginBottom: 0,
    padding: '1rem',
    borderBottom: `1px solid ${theme.greyScale5}`,
  },
  notesBody: {
    padding: '10px 15px',
    lineHeight: '20px',
  },
};

export const AnnotationPage = props => {
  const node = props.node;
  const classification = node.classification.replace(/(?!^)[A-Z]/g, (m) => ` ${m}`);

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <div style={styles.icon} />
        <h1>{node.annotation_id}</h1>
      </div>

      <EntityPageVerticalTable
        title="Summary"
        thToTd={[
          { th: 'Annotation UUID', td: node.annotation_id },
          { th: 'Entity UUID', td: node.entity_id },
          { th: 'Entity Barcode', td: node.entity_submitter_id },
          { th: 'Entity Type', td: capitalize(node.entity_type) },
          { th: 'Case UUID', td: node.case_id },
          { th: 'Case Submitter ID', td: node.case_submitter_id },
          { th: 'Project ID', td: node.project.project_id },
          { th: 'Classification', td: classification },
          { th: 'Category', td: node.category },
          { th: 'Created On', td: node.created_datetime.slice(0, 10) },
          { th: 'Status', td: node.status },
        ]}
      />

      <div style={styles.notes}>
        <div style={styles.notesHeader}>Notes</div>
        <div style={styles.notesBody}>{node.notes}</div>
      </div>
    </div>
  );
};

AnnotationPage.propTypes = {
  node: PropTypes.object,
};

export default Relay.createContainer(AnnotationPage, {
  fragments: {
    node: () => Relay.QL`
      fragment on Annotation {
        annotation_id
        entity_id
        entity_submitter_id
        entity_type
        case_id
        project {
          project_id
        }
        classification
        category
        created_datetime
        status
        notes
        case_submitter_id
      }
    `,
  },
});
