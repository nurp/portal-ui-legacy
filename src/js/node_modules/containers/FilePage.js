import Relay from 'react-relay';
import { h1, table, thead, tbody, th, tr, a, h, td } from 'react-hyperscript-helpers';
import { Td, Th } from 'uikit/Table';

import FileOIcon from 'react-icons/lib/fa/file-o';

import { Row, Column } from 'uikit/Flex';

export const FilePage = props => {
  const { node } = props;
  const styles = {
    content: { padding: '2rem 2.5rem 13rem' },
    table: {
      borderCollapse: 'collapse',
      borderSpacing: 0,
    },
  };
  return (
    h(Column, { style: styles.content }, [
      h1([h(FileOIcon), node.file_id]),
      h(Row, [
        table({ style: styles.table }, [
          thead([tr([th('File Properties')])]),
          tbody([
            tr([h(Th, 'Name'), h(Td, node.file_name)]),
            tr([h(Th, 'Access'), h(Td, node.access)]),
            tr([h(Th, 'UUID'), h(Td, node.id)]),
            tr([h(Th, 'Submitter ID'), h(Td, node.submitter_id)]),
            tr([h(Th, 'Data Format'), h(Td, node.data_format)]),
            tr([h(Th, 'Size'), h(Td, node.file_size)]),
            tr([h(Th, 'Archive'), h(Td, 'todo')]),
            tr([
              h(Th, 'Project ID'),
              h(Td, [...new Set(node.cases.map(c => c.project.project_id))]),
            ]),
          ]),
        ]),
        table([
          thead([tr([th('Data Information')])]),
          tbody([
            tr([h(Th, 'Data Category'), h(Td, node.data_category)]),
            tr([h(Th, 'Data Type'), h(Td, node.data_type)]),
            tr([h(Th, 'Experimental Strategy'), h(Td, node.experimental_strategy)]),
            tr([h(Th, 'Platform'), h(Td, node.platform || '--')]),
            tr([h(Th, 'Tag'), h(Td, (node.tags || ['--']).map(t => t).join(', '))]),
          ]),
        ]),
      ]),
      table([
        thead([tr([th('Associated Cases/Biospecimen')])]),
        thead([tr([
          h(Th, 'Entity Id'), h(Th, 'Entity Type'), h(Th, 'Case UUID'), h(Th, 'Annotations')]),
        ]),
        tbody(
          node.associated_entities.map(ae => [
            tr({ key: ae.entity_id }, [
              h(Td, ae.entity_id), h(Td, ae.entity_type), h(Td, ae.case_id), h(Td, 'todo'),
            ]),
          ])),
      ]),
      table([
        thead([tr([th('Meatadata Files')])]),
        thead([
          tr([
            h(Th, 'File Name'),
            h(Th, 'Data Category'),
            h(Th, 'Data Type'),
            h(Th, 'Data Format'),
            h(Th, 'File Size'),
            h(Th, 'Action'),
          ]),
        ]),
        tbody(
          node.metadata_files.length ?
          node.metadata_files.map(md => [
            tr({ key: md.file_id }, [
              h(Td, md.file_name),
              h(Td, md.data_category),
              h(Td, md.data_type),
              h(Td, md.data_format),
              h(Td, md.file_size),
              h(Td, 'to do'),
            ]),
          ]) : [tr([td(['No metadata files'])])],
        ),
      ]),
    ])
  );
};
export default Relay.createContainer(FilePage, {
  fragments: {
    node: () => Relay.QL`
      fragment on File {
        id
        file_id
        file_name
        file_size
        access
        data_category
        data_format
        data_type
        experimental_strategy
        tags
        cases {
          project {
            project_id
          }
        }
        associated_entities {
          case_id
          entity_id
          entity_type
        }
        metadata_files {
          file_id
          file_name
          data_category
          data_type
          data_format
          file_size
        }
        platform
      }
    `,
  },
});
