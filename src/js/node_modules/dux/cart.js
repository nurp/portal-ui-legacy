// Vendor
import React from 'react';
import { REHYDRATE } from 'redux-persist/constants';
import _ from 'lodash';
import UndoIcon from 'react-icons/lib/md/undo';

// Custom
import { notify } from 'dux/notification';
import { Column } from 'uikit/Flex';
import { center } from 'theme/mixins';

/*----------------------------------------------------------------------------*/

const UPDATE_CART = 'UPDATE_CART';

const cartLimit = 10000;

const fields = 'file_name,access,file_id,file_size,cases.project.project_id';

const fileInCart = (files, file) => files.some(f => f.file_id === file.file_id);

function makeArray(items) {
  return items.constructor === Array ? items : [items];
}

function overCartLimit(size) {
  return notify({
    action: 'warn',
    id: `warn/overlimit-${size}`,
    component:
      <Column style={center}>
        <span>
          The cart is limited to {cartLimit} files.
          Please narrow down your search criteria to be able to add files to your cart.
        </span>
      </Column>,
  });
}

/*----------------------------------------------------------------------------*/

function toggleInCart(incomingFiles) {
  return (dispatch, getState) => {
    const incomingFilesArray = makeArray(incomingFiles);
    const existingFiles = getState().cart.files;
    const nextFiles = _.xorBy(existingFiles, incomingFilesArray, 'file_id');
    const diff = nextFiles.length - existingFiles.length;

    if(nextFiles.length > cartLimit) {
      dispatch(overCartLimit(nextFiles.length));
    } else if(diff) {
      const action = diff > 0 ? 'add' : 'remove';
      const id = `${action}/${incomingFilesArray.map((file) => file.file_name).join(',')}`;
      const absDiff = Math.abs(diff);
      const isAdd = diff > 0;


      dispatch(notify({
        action,
        id,
        component:
          <Column style={center}>
            <span>
              {isAdd ? 'Added ' : 'Removed '}
              <strong>{absDiff > 1 ? absDiff : incomingFilesArray[0].file_name}</strong>
              {absDiff > 1 && ' files'} {isAdd ? 'to' : 'from'} the cart
            </span>
            <span>
              <UndoIcon />
              <a onClick={() => dispatch(toggleInCart(incomingFiles))}>Undo</a>
            </span>
          </Column>,
      }));

      dispatch({
        type: UPDATE_CART,
        payload: nextFiles,
      });
    }
  };
}

function addFilesToCart(incomingFiles) {
  return (dispatch, getState) => {
    const incomingFilesArray = makeArray(incomingFiles);
    const existingFiles = getState().cart.files;
    const newFiles = incomingFilesArray.filter((file) => !fileInCart(existingFiles, file));

    const nextFiles = [
      ...existingFiles,
      ...newFiles,
    ];

    const addToCartCount = newFiles.length;
    const alreadyInCartCount = incomingFilesArray.length - addToCartCount;
    const id = `add/${newFiles.map((file) => file.file_name).join(',')}`;

    dispatch(notify({
      action: 'add',
      id,
      component:
        <Column style={center}>
          <span>Added <strong>{addToCartCount}</strong> files to the cart.</span>
          {!!alreadyInCartCount &&
            <span>
              <strong>{alreadyInCartCount}</strong> files were already in cart, not added
            </span>
          }
          {!!addToCartCount &&
            <span>
              <UndoIcon />
              <a onClick={() => dispatch(toggleInCart(newFiles))}>Undo</a>
            </span>
          }
        </Column>,
    }));

    dispatch({
      type: UPDATE_CART,
      payload: nextFiles,
    });
  };
}

function addAllPagesToCart(options) {
  return (dispatch, getState) => {
    const { total, filters } = options;

    if (total + getState().cart.files.length > cartLimit) {
      dispatch(overCartLimit(total + getState().cart.files.length));
    } else {
      dispatch(notify({
        action: 'info',
        id: `info/${total}`,
        component:
          <Column style={center}>
            <span>Adding <strong>{total}</strong> files to cart</span>
          </Column>,
      }));

      fetch(`${__API__}files?fields=${fields}&from=0&filters=${filters}&size=${total}`,
        {
          method: 'get',
          credentials: 'same-origin',
          headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': true,
            'X-Auth-Token': 'secret admin token',
          },
        })
        .then((response) => response.json())
        .then((data) => dispatch(addFilesToCart(data.data.hits)));
    }
  };
}

const initialState = {
  files: [],
};

function reducer(state = initialState, action) {
  switch (action.type) {
    case REHYDRATE: {
      const incoming = action.payload.cart;
      if (incoming) return { ...state, ...incoming };
      return state;
    }

    case UPDATE_CART:
      return {
        ...state,
        files: action.payload.map(f => ({
          access: f.access,
          file_id: f.file_id,
          file_size: f.file_size,
          projects: f.projects || f.cases.map(c => c.project.project_id),
          file_name: f.file_name,
        })),
      };

    default:
      return state;
  }
}

/*----------------------------------------------------------------------------*/

export { toggleInCart, addAllPagesToCart, addFilesToCart };
export default reducer;
